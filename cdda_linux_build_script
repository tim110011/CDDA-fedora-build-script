#!/bin/bash
set -e

# CDDA linux build script
# CHANGE USER SETTINGS BEFORE USE!

VERSION=1.2.1

########################################
#          USER SETTINGS               #
########################################

remote_url="https://github.com/CleverRaven/Cataclysm-DDA.git"        # cdda git repo url
git_dir="/mnt/hd/me/git_local"                                        # local git repos dir
local="$(echo "$remote_url" | sed -E 's|^.*/||g; s|\..*$||g')"        # local cdda repo dir name, use default name: "Cataclysm-DDA"
gitrev='HEAD'                                                        # option: [ HEAD, commit,tag ] default: HEAD;  use commit or tag to build specified revision
lang="zh_CN"                                                        # choose language

bCheckDependencies=0                # should always set to 0. fedora only. use dnf check dependencies

bPause=1                            # default: 1;  1: pause scritp after function, see terminal output; 0: no pause, build until success or fail
bUpdate=1                            # should always set to 1: pull updates from remote; 0: skip check update
bPatch=0                            # default: 0;  0: don't use custom patches; 1: use some custom patches
patch_dir="$git_dir/$local-patch"    # put your custom patches in this dir

ts="$(date +%Y%m%d_%H%M%S)"
install_dir="/mnt/hd/me/tmp/$ts/$local"        #install to this dir

git_user_email='user@e.mail'        # set git config user.mail
git_user_name='username'        # set git config user.name

march_native=1                # add -march=native -pipe to Makefile. maybe optimize for ONLY your building CPU, build faster
disable_crater=1                # disable crater, i do not like it
keep_statsthroughskills=1        # keep StatsThroughSkills mod until changes are not revertable, i like it. Obsolete Stats through Skills #80780 https://github.com/CleverRaven/Cataclysm-DDA/pull/80780

iJobNum=$(($(nproc)))

# https://github.com/CleverRaven/Cataclysm-DDA/blob/master/doc/COMPILING/COMPILING.md
## Makefile flags
# CLANG do not work with MOLD or GOLD option
makeflags=(-j"$iJobNum"\
    CLANG=0\
    CCACHE=1\
    RELEASE=1\
    MOLD=0\
    LTO=0\
    TILES=1\
    SOUND=1\
    LANGUAGES="$lang"\
    TESTS=0\
    RUNTESTS=0\
    PCH=0\
    )

########################################
#         end of USER SETTINGS         #
########################################

# Paus or not pause
clbs_pause()
{
    if (( bPause == 1 )); then
        read -r -p 'Press Ctrl+C to terminate, press any key to continue...'
    fi
}

clbs_check_dependencies()
{
    dependencies=('@C Development Tools and Libraries' git ncurses-devel astyle-devel SDL2-devel SDL2_image-devel SDL2_mixer-devel SDL2_ttf-devel)
    if { dnf list --available "${dependencies[@]}" 2>/dev/null; }; then
        read -r -p 'Install dependencies? [y/n]'
        case "$REPLY" in
            y|Y)
                sudo dnf install "${dependencies[@]}"
                ;;
            *)
                printf 'User abort.\n'
                exit 1
                ;;
        esac
    fi
    clbs_pause
}

#clean build branch and files
f_clean()
{
    git checkout master
    if git branch -D my_custom_build; then :; fi
    git clean -fdx
    git restore .
}

clbs_update()
{
    [ -d "$git_dir" ] || mkdir -p "$git_dir"
    cd "$git_dir" || exit 1

    if [ -d ./"$local"/.git ]; then
        cd ./"$local"
        if (( bUpdate == 1 )); then
            f_clean
            git pull
        else
            f_clean
            printf '%s update skipped.\n' "$local"
        fi
    else
        git clone "$remote_url" "$local"
        cd ./"$local"
    fi

    printf '[INFO] Update source end.\n'
    clbs_pause
}

# version, build in git dir
clbs_version()
{
    build_rev="$(git log -1 --pretty='format:%H %(describe:tags=true)' "$gitrev") "
    [ -n "$build_rev" ] || { printf '[ERROR] {%s}: gitrevision gitrev=%s not found.\n' "${FUNCNAME[0]}" "$gitrev"; exit 1; }
    mkdir -p "$install_dir"
    printf '%s\n' "$build_rev" > "$install_dir"/version.txt
    gitcfg=0
}

# git config once
f_git_config()
{
    if (( gitcfg == 0 )); then
        git config user.email "$git_user_email"
        git config user.name "$git_user_name"
        gitcfg=1
    fi
}

# create custom build branch once
f_build_branch()
{
    f_git_config
    if (( gitcfg == 1 )); then
        git checkout -b my_custom_build
        gitcfg=2
    fi
}

f_march_native()
{
    f_build_branch
    sed -Ei 's/ *# OTHERS \+= -march=native.*/  OTHERS \+= -march=native -pipe/' Makefile
    git commit -a -m 'Add build option: -march=native -pipe'
    clbs_pause
}

f_keep_statsthroughskills()
{
    f_build_branch
    git revert --no-edit -m 1 9a38c0f6a19ca97fb32878392f9404ab5e965a5d
    git revert --no-edit -m 1 fd5feb4fa9dd7c94d0ec3b0629af67079fe5c91a
    git revert --no-edit -m 1 1f0e741b42b7749b9ad960fba3e823bde5d7884a
    git revert --no-edit -m 1 a2660f7f1b5c07ab0edfa70b399400abfa6aa495
    clbs_pause
}

f_disable_crater()
{
    f_build_branch
    sed -Ei 's/"occurrences": \[ 66, 100 \]/"occurrences": \[ 0, 0 \]/' data/json/overmap/overmap_mutable/crater.json
    #sed -Ei 's/"check_for_locations_area": \[ \{ "type": \[ "land", "road", "agricultural" \]/"check_for_locations_area": \[ \{ "type": \[  \]/' data/json/overmap/overmap_mutable/crater.json
    sed -Ei 's/"mx_crater": [0-9]+/"mx_crater": 0/g' data/json/regional_map_settings.json
    git commit -a -m 'Disable crater'
    clbs_pause
}

# apply custom patch
clbs_patch()
{
    for p in "$1"/*; do
        [ -e "$p" ] || continue
        git apply --verbose "$p"
    done
    clbs_pause
}

# make, work in "$build_dir"
clbs_build()
{
    time_start=$(date '+%T')
    make "${makeflags[@]}"
}

# replace `make install`
clbs_install()
{
    printf '[INFO] Installing to %s\n' "$install_dir"
    list=( data/core\
            data/font\
            data/json\
            data/mods\
            data/names\
            data/raw\
            data/motd\
            data/credits\
            data/title\
            data/fontdata.json )
    if [[ "${makeflags[*]}" =~ TILES=1 ]]; then list+=( gfx cataclysm-tiles ); else list+=( cataclysm ); fi
    if [[ "${makeflags[*]}" =~ SOUND=1 ]]; then list+=( data/sound ); fi
    if [[ "${makeflags[*]}" =~ LANGUAGES=.+ ]]; then list+=( lang/mo ); fi

    mapfile -t dir_list < <( printf '%s\n' "${list[@]}" | grep / | sed -E 's/\/[^/]*$//' | sort | uniq )
    for d in "${dir_list[@]}"; do mkdir -p "$install_dir"/"$d"; done
    for (( i=0 ; i < ${#list[@]} ; i++ )); do
        if [ -e "${list[i]}" ]; then
            cp -R "${list[i]}" "$install_dir"/"${list[i]}"
        else
            printf '[WARN] %s is missing!\n' "${list[i]}"
        fi
    done

    f_clean

    time_end=$( date '+%T' )
    printf '[INFO] Make end.\n'
    echo "build start: $time_start"
    echo "build end:   $time_end"
}

## main()
#{

printf 'CDDA linux build script %s\n\n    CHANGE USER SETTINGS BEFORE USE!    \n\n' "$VERSION"
printf 'Make flags:\n'
printf '    %s\n' "${makeflags[@]}"
printf '\n'
(( march_native == 1 )) && printf '    -march=native\n'
(( keep_statsthroughskills == 1 )) && printf '    keep StatsThroughSkills mod\n'
(( disable_crater == 1 )) && printf '    disable crater\n'

printf 'Start building %s?\n\n' "$gitrev"
clbs_pause

if (( bCheckDependencies == 1 )); then clbs_check_dependencies; fi

clbs_update
clbs_version

if (( march_native == 1 )); then f_march_native; fi
if (( keep_statsthroughskills == 1 )); then f_keep_statsthroughskills; fi
if (( disable_crater == 1 )); then f_disable_crater; fi

if (( bPatch == 1 )); then clbs_patch "$patch_dir"; fi

clbs_build
clbs_install

#}
