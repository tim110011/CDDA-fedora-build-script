#!/bin/bash
set -e

# CDDA fedora build script (CFBS)

CFBS_VERSION=1.0

########################################
#        user settings            #
########################################

remote_url="https://github.com/CleverRaven/Cataclysm-DDA.git" 			# cdda git repo url
git_dir="/mnt/hd/me/git_local" 										# local git repos dir
local="$(echo "$remote_url" | sed -E 's|^.*/||g; s|\..*$||g')" 			# local cdda repo dir name, use default name: "Cataclysm-DDA"
gitrev='HEAD'															# option: [ HEAD, commit,tag ] default: HEAD;  use commit or tag to build specified revision
#gitrev='0.F-3'
#gitrev='f256820ac9e03909798bebb6f23fb9f755ef6585'
lang="zh_CN"

bCheckDependencies=0 									# use dnf command check dependencies

bPause=1 												# default: 1;  1: pause scritp after function, see terminal output; 0: no pause, build until success or fail
bUpdate=1 												# default: 1;  1: check update from remote; 0: skip check update
bCustomCommands=0 										# default: 0;  0: don't change git dir; 1: run some custom git commands in git dir
bPatch=0												# default: 0;  0: don't use custom patches; 1: use some custom patches
patch_dir="$git_dir/$local-patch"

# https://github.com/CleverRaven/Cataclysm-DDA/blob/master/doc/COMPILING/COMPILING.md
iJobNum=$(($(nproc)+0))

#makeflags=(-j"$iJobNum" CLANG=1 CCACHE=1 RELEASE=1 LTO=1 TILES=1 SOUND=1 LOCALIZE=1 LANGUAGES="$lang" DYNAMIC_LINKING=0 RUNTESTS=0)
#makeflags=(-j"$iJobNum" CLANG=1 MOLD=1 CCACHE=1 RELEASE=1 LTO=0 TILES=1 SOUND=1 LOCALIZE=1 LANGUAGES="$lang" DYNAMIC_LINKING=1)
makeflags=(-j"$iJobNum" CLANG=0 CCACHE=1 RELEASE=1 LTO=1 TILES=1 SOUND=1 LOCALIZE=1 LANGUAGES="$lang" DYNAMIC_LINKING=0 RUNTESTS=0)
bOptimizeForYourCPU=1

ts="$(date +%Y%m%d_%H%M%S)"

build_dir="$(readlink -m "$git_dir/../tmp/$local")"
install_dir="$(readlink -m "$git_dir/../$ts/$local")"

########################################
#     end of user settings        #
########################################

# Paus or not pause
cfbs_pause()
{
	if (( bPause == 1 )); then
		read -r -p 'Press Ctrl+C to terminate, Press any key to continue.'
	fi
}

cfbs_check_dependencies()
{
	dependencies=('@C Development Tools and Libraries' git ncurses-devel astyle-devel SDL2-devel SDL2_image-devel SDL2_mixer-devel SDL2_ttf-devel)
	if { dnf list --available "${dependencies[@]}" 2>/dev/null; }; then
		read -r -p 'Install dependencies? [y/n]'
		case "$REPLY" in
			y|Y)
				sudo dnf install "${dependencies[@]}"
				;;
			*)
				printf 'User abort.\n'
				exit 1
				;;
		esac
	fi
}

cfbs_update()
{
	[ -d "$git_dir" ] || mkdir -p "$git_dir"
	cd "$git_dir"

	if [ -d ./"$local"/.git ]; then
		cd ./"$local"
		if (( bUpdate == 1 )); then
			printf 'Updating %s ...\n' "$local"
			git fetch
			git pull
		else
			printf '%s update skipped.\n' "$local"
		fi
	else
		git clone "$remote_url" "$local"
		cd ./"$local"
	fi

	printf '[INFO] Update source end.\n'
}

# don't build in git dir
cfbs_export()
{
	build_rev="$(git log -1 --pretty=tformat:%H "$gitrev")"
	[ -n "$build_rev" ] || { printf '[ERROR] {%s}: gitrevision gitrev=%s not found.\n' "${FUNCNAME[0]}" "$gitrev"; exit 1; }
	mkdir -p "$build_dir"
	mkdir -p "$install_dir"
	printf '%s\n' "$build_rev" > "$install_dir"/version.txt
	if { git describe --exact-match "$build_rev" >> "$install_dir"/version.txt 2>/dev/null; }; then :; fi;
	git archive --format=tar "$build_rev" | ( cd "$build_dir" && tar xf - )
	cd "$build_dir" || exit 1
}

cfbs_custom_commands()
{
	git revert -m 1 dd5c1fc903ee9a71a566b9579393b47b87ae9e6e
}

# apply custom patch
cfbs_patch()
{
	for p in "$1"/*; do
		[ -e "$p" ] || continue
		git apply --verbose "$p"
	done
}

# make, work in "$build_dir"
cfbs_build()
{
	time_start=$( date '+%T' )
	if (( bOptimizeForYourCPU == 1 )); then
		regexp=' *# OTHERS \+= -march=native'
		replacement='    OTHERS \+= -march=native'
		sed -Ei "s/$regexp/$replacement/" Makefile
	fi
	make "${makeflags[@]}"
	time_end=$( date '+%T' )

	printf '[INFO] Make end.\n'
	echo "compile start: $time_start"
	echo "compile end:   $time_end"
}

# replace `make install`
cfbs_install()
{
	printf '[INFO] Installing to %s\n' "$install_dir"
	list=( data/core data/font data/json data/mods data/names data/raw data/motd data/credits data/title data/help \
		gfx data/sound data/changelog.txt data/cataicon.ico data/fontdata.json LICENSE.txt LICENSE-OFL-Terminus-Font.txt lang/mo )
	if [[ "${makeflags[*]}" =~ TILES=1 ]]; then
		list+=( cataclysm-tiles )
	else
		list+=( cataclysm )
	fi

	mapfile -t dir_list < <( printf '%s\n' "${list[@]}" | grep / | sed -E 's/\/[^/]*$//' | sort | uniq )
	for d in "${dir_list[@]}"; do mkdir -p "$install_dir"/"$d"; done
	for (( i=0 ; i < ${#list[@]} ; i++ )); do
		if [ -e "${list[i]}" ]; then
			cp -R "${list[i]}" "$install_dir"/"${list[i]}"
		else
			printf '[WARN] %s is missing!\n' "${list[i]}"
		fi
	done
	sudo sync && rm -rf "$build_dir"
	printf '[INFO] Install end.\n'
}

## main()
#{

printf 'CDDA Fedora build script (CFBS) %s\n\n' "$CFBS_VERSION"
printf 'Make flags:\n'
printf '    %s\n' "${makeflags[@]}"
(( bOptimizeForYourCPU == 1 )) && printf '    -march=native\n'
printf '\nBuild %s?\n\n' "$gitrev"
cfbs_pause

if (( bCheckDependencies == 1 )); then { cfbs_check_dependencies; cfbs_pause; }; fi

cfbs_update
cfbs_pause

if (( bCustomCommands == 1 )); then { cfbs_custom_commands; cfbs_pause; }; fi

cfbs_export

if (( bPatch == 1 )); then { cfbs_patch "$patch_dir"; cfbs_pause; }; fi

cfbs_build

cfbs_install

#}
